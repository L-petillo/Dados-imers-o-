# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MyUTTYr8vE0vXKejrkqiJwrjX8HuA5ct
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from nltk.tokenize import word_tokenize

dados = pd.read_csv('/content/dados.csv')
avaliacoes = pd.read_csv('/content/avaliacoes.csv')

dados.head(2)

dados.info()

dados.describe()

# Remova o símbolo da moeda (₹) usando str.replace()
dados['actual_price'] = dados['actual_price'].str.replace('₹', '')

dados['actual_price'] = dados['actual_price'].str.replace('.', '')

dados['actual_price'] = dados['actual_price'].str.replace(',', '.')

# Converta os valores para o tipo numérico (opcional)
dados['actual_price'] = pd.to_numeric(dados['actual_price'])

dados.head()

dados['product_price'] = dados['product_price'].str.replace('₹', '').str.replace('.', '').str.replace(',', '.')
# Converta os valores para o tipo numérico (opcional)
dados['product_price'] = pd.to_numeric(dados['product_price'])
dados.head()

dados['rating'] = dados['rating'].str.replace(',', '.')

dados['rating'] = pd.to_numeric(dados['rating'])

dados.info()

dados.describe()

dados.head()

"""## Graficos"""

# 1. Filtrar os dados para selecionar apenas as avaliações acima de 4.5
ratings_above_4_5 = dados[dados['rating'] > 4.5]

# 2. Contar quantas avaliações atendem ao critério
rating_counts = ratings_above_4_5['rating'].value_counts().sort_index()

# 3. Plotar o gráfico de barras
plt.figure(figsize=(10, 6))  # Ajuste o tamanho do gráfico conforme necessário
sns.barplot(x=rating_counts.index, y=rating_counts.values)
plt.xlabel('Avaliação')
plt.ylabel('Contagem')
plt.title('Contagem de Avaliações Acima de 4.5')
plt.show()

faixa1= dados[dados['actual_price'] <= 50]
faixa2= dados[(dados['actual_price'] > 50) & (dados['actual_price'] <= 500)]
faixa3= dados[dados['actual_price'] > 500]

# 2. Contar o número de produtos em cada faixa de valor
contagem_faixa1 = len(faixa1)
contagem_faixa2 = len(faixa2)
contagem_faixa3 = len(faixa3)


# 3. Prepara o dados para o grafico de pizza
contagens= [contagem_faixa1, contagem_faixa2, contagem_faixa3]
faixas= ['Até 50 Rupias', 'Entre 50 e 500 Rupias', 'Acima de 500 Rupias']
explode = (0, 0, 0.1)  # Destacar o maior valor

plt.figure(figsize=(8, 8))
plt.pie(contagens, labels=faixas, explode=explode, autopct='%1.1f%%',  startangle=140)
plt.title('Distribuição de Produtos por Faixa de valor')
plt.axis('equal')  # Garante que o gráfico de pizza seja redondo
plt.show()

!pip install pandas-profiling

import pandas_profiling

# Verifique se as colunas existem antes de tentar removê-las
colunas_para_remover = ['title_ptbr', 'review_ptbr', 'resumo', 'sentimento']
colunas_existentes = [coluna for coluna in colunas_para_remover if coluna in dados.columns]

# Remova as colunas existentes
if colunas_existentes:
    dados.drop(columns=colunas_existentes, inplace=True)

"""Desafios"""

# Taxa de conversão de Rupia Indiana para Real
taxa_conversao = 0.057

# Criar a nova coluna "actual_price_real" com os valores convertidos
dados['actual_price_real'] = dados['actual_price'] * taxa_conversao

# Exiba o DataFrame resultante
print(dados)

# 1. Calcular a diferença entre os valores
dados['diferenca'] = dados['product_price'] - dados['actual_price']

# 2. Calcular a porcentagem de diferença
dados['percent_diferenca'] = (dados['diferenca'] / dados['product_price']) * 100

# Exiba o DataFrame resultante
print(dados)

# Filtro para notas (ratings) acima de 4.5
notas_acima_de_45 = dados[dados['rating'] > 4.5]

# Exiba as linhas que atendem ao critério
print(notas_acima_de_45)

# Filtros para as faixas de preço
produtos_ate_50_reais = dados[dados['actual_price_real'] < 50]
produtos_entre_50_e_500_reais = dados[(dados['actual_price_real'] >= 50) & (dados['actual_price_real'] <= 500)]
produtos_acima_de_500_reais = dados[dados['actual_price_real'] > 500]

# Contagem de produtos em cada faixa de preço
count_ate_50_reais = produtos_ate_50_reais.shape[0]
count_entre_50_e_500_reais = produtos_entre_50_e_500_reais.shape[0]
count_acima_de_500_reais = produtos_acima_de_500_reais.shape[0]

# Exiba a contagem
print("Produtos abaixo de 50 reais:", count_ate_50_reais)
print("Produtos entre 50 e 500 reais:", count_entre_50_e_500_reais)
print("Produtos acima de 500 reais:", count_acima_de_500_reais)

# Contar o número de produtos em cada faixa
quantidade_abaixo_de_50_reais = len(produtos_ate_50_reais)
quantidade_entre_50_e_500_reais = len(produtos_entre_50_e_500_reais)
quantidade_acima_de_500_reais = len(produtos_acima_de_500_reais)

# Criar um gráfico de barras ou de pizza
faixas = ['Abaixo de 50 R$', 'Entre 50 e 500 R$', 'Acima de 500 R$']
quantidades = [quantidade_abaixo_de_50_reais, quantidade_entre_50_e_500_reais, quantidade_acima_de_500_reais]

plt.figure(figsize=(8, 6))  # Ajuste o tamanho do gráfico conforme necessário

# Gráfico de barras
plt.bar(faixas, quantidades, color='blue')
plt.xlabel('Faixa de Preço')
plt.ylabel('Quantidade de Produtos')
plt.title('Quantidade de Produtos por Faixa de Preço')

# Alternativamente, você pode criar um gráfico de pizza
# plt.pie(quantidades, labels=faixas, autopct='%1.1f%%', shadow=True, startangle=140)
# plt.title('Distribuição de Produtos por Faixa de Preço')

# Cálculo da média de preço para cada faixa de preço
media_ate_50_reais = produtos_ate_50_reais['actual_price_real'].mean()
media_entre_50_e_500_reais = produtos_entre_50_e_500_reais['actual_price_real'].mean()
media_acima_de_500_reais = produtos_acima_de_500_reais['actual_price_real'].mean()

# Exiba as médias
print("Média de produtos abaixo de 50 reais:", media_ate_50_reais)
print("Média de produtos entre 50 e 500 reais:", media_entre_50_e_500_reais)
print("Média de produtos acima de 500 reais:", media_acima_de_500_reais)

# Cálculo da média ponderada
soma_rating_count = dados['rating_count'].sum()
dados['weighted_rating'] = (dados['rating'] * dados['rating_count']) / soma_rating_count

media_ponderada = dados['weighted_rating'].sum()

# Exiba a média ponderada
print("Média Ponderada:", media_ponderada)

# Defina os intervalos desejados
intervalos = [4, 4.49, 4.5, 4.51, 4.52, 5.0]

# Aplicar filtro para avaliações acima de 4.5
avaliacoes_acima_de_4_5 = dados[dados['rating'] > 4.5]

# Crie uma coluna com os intervalos para cada avaliação
avaliacoes_acima_de_4_5['intervalo'] = pd.cut(avaliacoes_acima_de_4_5['rating'], bins=intervalos)

# Contagem de avaliações em cada intervalo
contagem_por_intervalo = avaliacoes_acima_de_4_5['intervalo'].value_counts()

# Criar um gráfico de barras para mostrar a contagem de avaliações em cada intervalo
plt.figure(figsize=(10, 6))  # Ajuste o tamanho do gráfico conforme necessário
contagem_por_intervalo.sort_index().plot(kind='bar', color='blue')
plt.xlabel('Intervalo de Avaliação')
plt.ylabel('Contagem')
plt.title('Contagem de Avaliações Acima de 4.5 por Intervalo')
plt.show()

# Extraia as colunas "rating" e "rating_count" do DataFrame
rating = dados['rating']
rating_count = dados['rating_count']

# Crie um gráfico de dispersão
plt.figure(figsize=(10, 6))  # Ajuste o tamanho do gráfico conforme necessário
plt.scatter(rating, rating_count, alpha=0.5)  # "alpha" ajusta a transparência dos pontos
plt.xlabel('Rating')
plt.ylabel('Rating Count')
plt.title('Gráfico de Dispersão: Rating vs. Rating Count')

# Adicione rótulos aos pontos para identificar os pontos se desejar
# for i, label in enumerate(dados['nome_do_produto']):
#     plt.annotate(label, (rating[i], rating_count[i]))

plt.grid(True)
plt.show()

# Use o método str.split() para separar o texto com base em "|"
dados['category_geral'] = dados['category'].str.split('|').str[0]

dados['subcategory'] = dados['category'].str.split('|').str[1]

# Exiba o DataFrame resultante
print(dados)

# 1. Contar a quantidade de produtos em cada categoria geral
contagem_categoria_geral = dados['category_geral'].value_counts()

# 2. Criar um gráfico de barras
plt.figure(figsize=(10, 6))  # Ajuste o tamanho do gráfico conforme necessário
contagem_categoria_geral.plot(kind='barh', color='blue')
plt.xlabel('Categoria Geral')
plt.ylabel('Quantidade de Produtos')
plt.title('Quantidade de Produtos por Categoria Geral')

# Rotacionar os rótulos do eixo x para melhor visualização (opcional)
plt.xticks(rotation=90)

plt.show()

# 1. Contar a quantidade de produtos em cada subcategoria
contagem_subcategoria = dados['subcategory'].value_counts()

# 2. Criar um gráfico de barras na horizontal
plt.figure(figsize=(10, 6))  # Ajuste o tamanho do gráfico conforme necessário
contagem_subcategoria.plot(kind='barh', color='blue')  # Use kind='barh' para barras horizontais
plt.xlabel('Quantidade de Produtos')
plt.ylabel('Subcategoria')
plt.title('Quantidade de Produtos por Subcategoria')

plt.show()

# 1. Agrupe os dados pela subcategoria e calcule a média dos preços em reais
preco_medio_por_subcategoria = dados.groupby('category_geral')['actual_price_real'].mean().reset_index()

# 1. Agrupe os dados por subcategoria (category_geral) e calcule a média dos preços em reais
preco_medio_por_categoria = dados.groupby('category_geral')['actual_price_real'].mean().reset_index()

# 2. Criar um gráfico de barras na vertical
plt.figure(figsize=(10, 6))  # Ajuste o tamanho do gráfico conforme necessário
plt.bar(preco_medio_por_categoria['category_geral'], preco_medio_por_categoria['actual_price_real'], color='blue')
plt.ylabel('Preço Médio em Reais')
plt.xlabel('Subcategoria')
plt.title('Preço Médio em Reais por Subcategoria')

# Rotacionar os rótulos do eixo x para melhor visualização (opcional)
plt.xticks(rotation=90)

plt.show()

import nltk

# Baixe os recursos do NLTK
nltk.download('punkt')

!pip install textblob
from textblob import TextBlob

!pip install googletrans
from googletrans import Translator